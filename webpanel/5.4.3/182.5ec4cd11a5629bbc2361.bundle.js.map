{"version":3,"file":"182.5ec4cd11a5629bbc2361.bundle.js","mappings":"uTA8BA,MAAMA,UAAyBC,EAAAA,UAGpBC,YAAYC,GACfC,MAAMD,GAENE,KAAKC,aAAeD,KAAKC,aAAaC,KAAKF,MAE3CA,KAAKG,MAAQ,CACTC,OAAQ,GACRC,QAAQ,GAIRC,SAASC,GACbP,KAAKQ,UAASC,IACV,MAAML,EAASM,MAAMC,KAAKF,EAAUL,QAEpC,OADAA,EAAOQ,KAAKL,GACL,CACHH,OAAAA,MAKc,mBAACS,GACvB,MAAMC,EAAad,KAAKe,QAAQF,SAASG,GACzC,IAAIC,EACAJ,EAASK,MAAQL,EAASK,MAAQlB,KAAKe,QAAQF,SAASK,OACxDD,EAAUJ,EAASK,KACnBL,EAASK,KAAO,KAChBL,EAASM,QAAS,EAClBnB,KAAKQ,SAAS,CAAEH,QAAQ,KAG5B,MAAMe,QAAiBC,EAAAA,EAAAA,aAA4B,IAC5CR,EACHG,GAAIF,IAER,GAAIM,EAASE,OAASC,EAAAA,EAAAA,GAGlB,OAFAvB,KAAKM,SAASc,EAASb,YACvBP,KAAKQ,SAAS,CAAEH,QAAQ,IAI5B,GAAIY,EAAS,CAET,MAAMO,QAAkBH,EAAAA,EAAAA,aAA4B,CAChDL,GAAIhB,KAAKe,QAAQF,SAASG,GAC1BE,KAAMD,IAGV,GAAIO,EAAUF,OAASC,EAAAA,EAAAA,GAInB,OAHAvB,KAAKM,SAASkB,EAAUjB,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,eAClBL,KAAKe,QAAQU,iBAKvB,IAAIC,EACJ,GAII,SAHM,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjDF,QAAkBL,EAAAA,EAAAA,YAA2BP,GAEzCY,EAAUJ,OAASC,EAAAA,EAAAA,GAInB,OAHAvB,KAAKM,SAASoB,EAAUnB,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,eAClBL,KAAKe,QAAQU,uBAGlBC,EAAUI,QAAQC,SAE3B,MAAMC,QAAkBX,EAAAA,EAAAA,aAA4B,CAChDF,QAAQ,EACRH,GAAIF,IAEJkB,EAAUV,OAASC,EAAAA,EAAAA,IACnBvB,KAAKM,SAAS0B,EAAUzB,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,KAExB4B,EAAAA,EAAAA,YAA2BT,EAAUM,QAAQC,QAAUjB,SAIzDd,KAAKe,QAAQU,iBAGhBS,SACH,MAAMC,EAAeC,IACVC,EAAAA,EAAAA,KAAwBC,EAAAA,EAAAA,IAAqBtC,KAAKe,QAAQwB,MAAOH,GAGtEI,EAAS,CACXC,KAAM,CACFA,KAAM,uBACNC,KAAMC,EAAAA,GAAAA,OACNC,aAAc5C,KAAKe,QAAQF,SAAS4B,KACpCI,UAAWV,EAAYW,EAAAA,GAAAA,SAE3B5B,KAAM,CACFuB,KAAM,uBACNC,KAAMC,EAAAA,GAAAA,OACNC,aAAc5C,KAAKe,QAAQF,SAASK,KACpC2B,UAAWV,EAAYW,EAAAA,GAAAA,WAE3BC,aAAc,CACVN,KAAM,+BACNC,KAAMC,EAAAA,GAAAA,OACNK,IAAK,EACLJ,aAAc5C,KAAKe,QAAQF,SAASkC,aACpCF,UAAWV,EAAYW,EAAAA,GAAAA,kBAE3BG,mBAAoB,CAChBR,KAAM,6BACNC,KAAMC,EAAAA,GAAAA,OACNK,IAAK,EACLJ,aAAc5C,KAAKe,QAAQF,SAASoC,mBACpCJ,UAAWV,EAAYW,EAAAA,GAAAA,gBAE3BI,kBAAmB,CACfT,KAAM,2BACNC,KAAMC,EAAAA,GAAAA,KACNQ,KAAMC,EAAAA,GACNR,aAAc5C,KAAKe,QAAQF,SAASqC,kBACpCL,UAAWV,EAAYW,EAAAA,GAAAA,oBAI/B,OACI,uBAAKO,UAAU,eACX,0BACI,gBAAC,IAAD,CAAkBrC,GAAG,wBAEzB,gBAAC,IAAD,CAAiBsC,IAAKtD,KAAKe,UAC1Bf,KAAKG,MAAMC,OAAOmD,KAAI,CAACC,EAAKC,KACzB,GAAKD,EACL,OACI,gBAAC,KAAD,CACIE,IAAKD,EACLlD,MAAOiD,EACPG,QAAS,IACL3D,KAAKQ,UAASoD,IACV,MAAMC,EAASnD,MAAMC,KAAKiD,EAAKxD,QAE/B,OADAyD,EAAOJ,QAASK,EACT,CACH1D,OAAQyD,WAQ/B7D,KAAKG,MAAME,OACR,gBAAC,IAAD,CAAS0D,KAAK,0BAEd,gBAAC,IAAD,CAAWvB,OAAQA,EAAQwB,OAAQhE,KAAKC,iBAM5DN,EAAiBsE,YAAcC,EAAAA,EAC/B,WAAeC,EAAAA,EAAAA,IAAWxE,I,iQCvKnB,SAASyE,IACZ,MAAMC,GAAsBC,EAAAA,EAAAA,YAAWJ,EAAAA,GACjCK,GAAaC,EAAAA,EAAAA,UAAsD,KAClEC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAoC,OACjEK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAsC,OACrEO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAiB,IACxDS,EAAuBC,IAA4BV,EAAAA,EAAAA,UAAiB,IAGpEW,EAAqBC,IAA0BZ,EAAAA,EAAAA,UAA6B,GAE7Ea,GAAUC,EAAAA,EAAAA,IACZjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,MAEEC,GAAaH,EAAAA,EAAAA,IACfjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,SAEEE,GAAqBJ,EAAAA,EAAAA,IACvBjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,aAGJG,eAAeC,IACX,IAAKP,EAAS,OAAOX,GAAa,GAElCA,GAAa,GACb,MAAMtD,QAAiByE,EAAAA,EAAAA,cAA+BxB,EAAoBxD,SAASG,IACnF0D,GAAa,GAETtD,EAASE,OAASC,EAAAA,EAAAA,GAClBqD,EAAcxD,EAASU,UAEvBxB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,OAItCoF,eAAeG,EAAgBC,GAC3B,IAAKL,EACD,OAIJZ,EAAe,MACf,MAAM1D,QAAiByE,EAAAA,EAAAA,gBAAiCxB,EAAoBxD,SAASG,GAAI,CACrF+E,KAAAA,EACAC,SAAUb,IAGV/D,EAASE,OAASC,EAAAA,EAAAA,IACb4D,GAAqBC,EAAuBhE,EAASU,QAAQkE,UAElEd,EAAyB9D,EAASU,QAAQmE,YAC1CjB,EAAmBe,GACnBjB,EAAe1D,EAASU,QAAQoE,WAEhC5F,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,OAUtC,IAAI4F,GANJC,EAAAA,EAAAA,YAAU,KACDR,IACAE,EAAgB,KAEtB,CAACzB,EAAoBxD,SAASG,KAGjC,MAAMqF,EAAkB,mEAAmEC,KACvF3B,GAAYwB,SAAW,IAE3B,GAAIE,EAAiB,CACjB,MAAME,EAAaF,EAAgBG,OACnCL,EACyE,IAAnC,GAAjCM,SAASF,EAAWG,MAAQ,GAAUD,SAASF,EAAWI,QAC3DF,SAASF,EAAWK,SACpBH,SAASF,EAAWM,SAAW,GAGvC,MAAMrE,EAAS,CACXsE,YAAa,CACTpE,KAAMC,EAAAA,GAAAA,OACNF,KAAM,qCACNsE,QAAS,0CACTnE,aAAc+B,GAAYmC,YAC1BjE,WAAWyC,EAAAA,EAAAA,IACPjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,SAGRW,QAAS,CACLzD,KAAMC,EAAAA,GAAAA,OACNF,KAAM,iCACNsE,QAAS,sCACTnE,aAAcuD,EACdtD,WAAWyC,EAAAA,EAAAA,IACPjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,aAGRwB,kBAAmB,CACftE,KAAMC,EAAAA,GAAAA,OACNK,IAAK,EACLiE,IAAK,MACLxE,KAAM,iCACNsE,QAAS,sCACTnE,aAAc+B,GAAYqC,kBAC1BnE,WAAWyC,EAAAA,EAAAA,IACPjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,uBAGR0B,2BAA4B,CACxBxE,KAAMC,EAAAA,GAAAA,KACNQ,KAAMgE,EAAAA,GACN1E,KAAM,kCACNsE,QAAS,uCACTnE,aAAc+B,GAAYuC,2BAC1BrE,WAAWyC,EAAAA,EAAAA,IACPjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,mBAGR4B,uBAAwB,CACpB1E,KAAMC,EAAAA,GAAAA,QACNF,KAAM,qCACNsE,QAAS,0CACTnE,aAAc+B,GAAYyC,uBAC1BvE,WAAWyC,EAAAA,EAAAA,IACPjB,EAAoBkB,sBACpBC,EAAAA,GAAAA,+BAKZ,IAAI6B,EAA6C,KACjD,MAAMC,EAAS,CACXC,YAAaxC,EACbkB,WAAYhB,EACZuC,SAAU1B,EACVE,SAAUb,GAAuB,GAgBrC,OAbKO,EAKMb,IACPwC,EAAqB,CACjBI,aAAcC,EAAAA,EAAAA,YACd7C,YAAAA,EACAyC,OAAAA,IARJD,EAAqB,CACjBI,aAAcC,EAAAA,EAAAA,YACdJ,OAAAA,GAWJ,uBAAKjE,UAAU,eACX,gBAAC,IAAD,CAAiBC,IAAK,CAAEqB,WAAAA,MACvBgD,EAAAA,EAAAA,IAAcpD,GACdmB,EACG,gBAAC,IAAD,CAAkBkC,SAAUP,IAE5B,gBAAC,IAAD,CAAcQ,MAAM,kCAExB,2BACA,0BACI,gBAAC,IAAD,CAAkB7G,GAAG,gCAEvBqE,EAA+D,KAArD,gBAAC,IAAD,CAAcwC,MAAM,8BAC/BpD,EACG,gBAAC,IAAD,CAASV,KAAK,wBAEd,gCACI,gBAAC,IAAD,CACI+D,cAAezC,EACf7C,OAAQA,EACRwB,OAAQ2B,MAAAA,IACJ,IAAIoC,EACJ,GAAIC,EAAQ7B,QAAS,CACjB,MAAMO,EAAOuB,KAAKC,MAAMF,EAAQ7B,QAAR,MACxB6B,EAAQ7B,SAAkB,KAAPO,EACnB,MAAMC,EAAQsB,KAAKC,MAAMF,EAAQ7B,QAAU,IAC3C6B,EAAQ7B,SAAmB,GAARQ,EACnB,MAAMC,EAAUqB,KAAKC,MAAMF,EAAQ7B,SACnC6B,EAAQ7B,SAAWS,EACnB,MAAMC,EAAUoB,KAAKC,MAAwB,GAAlBF,EAAQ7B,SAE/B4B,EADArB,EACc,GAAEA,KAAQC,KAASC,KAAWC,IAE9B,GAAEF,KAASC,KAAWC,IAI5C,MAAMsB,EAAS,IACRH,EACH7B,QAAS4B,GAGbrD,GAAa,GACb,MAAMtD,QAAiByE,EAAAA,EAAAA,iBACnBxB,EAAoBxD,SAASG,GAC7BmH,GAEA/G,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,aAExBqF,IAEVlB,GAAa,MAGrB,2BACA,gBAAC,IAAD,CACI0D,UAAU,kBACVC,MAAM5C,QAAqB3B,GAC3B,gBAAC,IAAD,CACIjB,UAAW4C,EACX6C,QAAS3C,UACL,MAAMvE,QAAiByE,EAAAA,EAAAA,aACnBxB,EAAoBxD,SAASG,IAE7BI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,QAE9B0B,EAAAA,EAAAA,YACIb,EAASU,QACTuC,EAAoBxD,SAASG,IAEjCiB,EAAAA,EAAAA,SAA0B,KAGlC,gBAAC,IAAD,CAAkBjB,GAAG,sC,4LCrPlC,SAASuH,IACpB,MAAMlE,EAAsBzE,EAAAA,WAAiBsE,EAAAA,IAEtCsE,EAAMC,IAAWjE,EAAAA,EAAAA,UAA2B,KAC5CpE,EAAQsI,IAAalE,EAAAA,EAAAA,UAAsD,KAC3EmE,EAASC,IAAcpE,EAAAA,EAAAA,WAAS,IAChCuB,EAAM8C,IAAWrE,EAAAA,EAAAA,UACpBsE,EAAAA,GAAAA,eAAAA,IAA6BzE,EAAoBxD,SAASG,KAAO,IAE9D+H,EAASC,IAAcxE,EAAAA,EAAAA,eAA6BV,GA2B3D,SAASxD,EAASC,GACdmI,GAAUjI,IACN,MAAML,EAASM,MAAMC,KAAKF,GAE1B,OADAL,EAAOQ,KAAKL,GACLH,KAIfuF,eAAesD,EAASC,GACpB,MAAMC,QAAeC,EAAAA,EAAAA,UAAqBF,EAAIpI,WAAYoI,EAAIlI,IAE1DmI,EAAO7H,OAASC,EAAAA,EAAAA,GAChBU,EAAAA,EAAAA,SAA0B,EAE1B3B,EAAS6I,EAAO5I,OAIxB,OAzCA6F,EAAAA,EAAAA,YAAU,KAgBN0C,EAAAA,GAAAA,eAAAA,IAA6BzE,EAAoBxD,SAASG,GAAI+E,GAC9D6C,GAAW,GAhBXjD,iBACI,MAAMvE,QAAiBgI,EAAAA,EAAAA,SAAoB/E,EAAoBxD,SAASG,GAAI,CACxE+E,KAAMA,IAEN3E,EAASE,OAASC,EAAAA,EAAAA,IACdwE,EAAO3E,EAASU,QAAQmE,YAA8C,IAAhC7E,EAASU,QAAQmE,YACvD4C,EAAQ,GACZJ,EAAQrH,EAASU,QAAQoE,SACzB8C,EAAW5H,EAASU,QAAQmE,aAE5B3F,EAASc,EAASb,OAEtBqI,GAAW,GAKVS,KACN,CAACtD,EAAM1B,EAAoBxD,SAASG,MAEvCoF,EAAAA,EAAAA,YAAU,QAAU,CAAChG,IAoBjBuI,EACO,gBAAC,IAAD,CAAS5E,KAAK,+BAIrB,2BACI,gBAAC,IAAD,CAAiBT,IAAKkF,IACrBpI,EAAOmD,KAAI,CAACC,EAAKC,KACd,GAAKD,EACL,OACI,gBAAC,KAAD,CACIE,IAAKD,EACLlD,MAAOiD,EACPG,QAAS,IACL+E,GAAU9E,IACN,MAAMC,EAASnD,MAAMC,KAAKiD,GAE1B,OADAC,EAAOJ,QAASK,EACTD,UAM1B2E,EACIc,MAAK,CAACC,EAAGC,IAAMA,EAAExI,GAAKuI,EAAEvI,KACxByI,QAAOP,KAASA,EAAIQ,YACpBnG,KAAI2F,GACD,gBAAC,IAAD,CAASA,IAAKA,EAAKxF,IAAKwF,EAAIlI,GAAIiI,SAAUA,MAElD,gBAAC,IAAD,CACIU,WAAYC,GAAWf,EAAQe,GAC/B3D,WAAY8C,GAAW,EACvBxB,YAAaxB,O,iCCtExB8D,E,4OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,QAAAA,GAAAA,U,CAAAA,IAAAA,EAAAA,KAmfL,WAAeC,EAAAA,EAAAA,KA7ef,SAAgBhK,GACZ,MAAMuE,GAAsBC,EAAAA,EAAAA,YAAWJ,EAAAA,IAChC6F,EAAkBC,IAAuBxF,EAAAA,EAAAA,aACzCmE,EAASC,IAAcpE,EAAAA,EAAAA,WAAS,GACjCD,GAAaC,EAAAA,EAAAA,UAAsD,IAIzEmB,eAAesE,IACX,KACKC,EAAAA,EAAAA,IACG7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,cAGJ,OAAOH,EAAoB,IAG/B,MAAM5I,QAAiBgJ,EAAAA,EAAAA,kBAAoC/F,EAAoBxD,SAASG,IACpFI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,OAE9ByJ,EAAoB5I,EAASU,SAGrC6D,eAAe0E,EAAqBC,GAChC1B,GAAW,GACX,MAAMxH,QAAiBgJ,EAAAA,EAAAA,qBACnB/F,EAAoBxD,SAASG,GAC7BsJ,GAEAlJ,EAASE,OAASC,EAAAA,EAAAA,QAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,aAE5B0J,IACNrB,GAAW,GA2Df,IAxFAxC,EAAAA,EAAAA,YAAU,KAAW6D,MAAwB,CAAC5F,EAAoBxD,SAASG,MAwFtE+I,EACD,OAAO,iCAAGpC,EAAAA,EAAAA,IAAcpD,IAG5B,GAAIoE,EACA,OAAO,gBAAC,IAAD,MAGX,MAAMnG,EAAS,CACX+H,UAAW,CACP7H,KAAMC,EAAAA,GAAAA,QACNF,KAAM,qCACNG,aAAcmH,EAAiBQ,UAC/B1H,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,eAGRK,cAAe,CACX9H,KAAMC,EAAAA,GAAAA,QACNF,KAAM,6CACNG,aAAcmH,EAAiBS,cAC/B3H,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,cAGRM,UAAW,CACP/H,KAAMC,EAAAA,GAAAA,QACNF,KAAM,qCACNG,aAAcmH,EAAiBU,UAC/B5H,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,eAGRO,KAAM,CACFhI,KAAMC,EAAAA,GAAAA,OACNF,KAAM,gCACNG,aAAcmH,EAAiBW,KAC/B1H,IAAK,EACLiE,IAAK,MACLpE,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,UAGRQ,WAAY,CACRjI,KAAMC,EAAAA,GAAAA,KACNF,KAAM,sCACNG,aAAcmH,EAAiBY,WAC/BxH,KAAMyH,EAAAA,GACN/H,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,gBAGRU,cAAe,CACXnI,KAAMC,EAAAA,GAAAA,KACNF,KAAM,yCACNG,aAAcmH,EAAiBc,cAC/B1H,KAAMgE,EAAAA,GACNtE,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,cAGRW,eAAgB,CACZpI,KAAMC,EAAAA,GAAAA,OACNF,KAAM,2CACNG,aAAcmH,EAAiBe,eAC/B9H,IAAK,EACLH,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,oBAGRY,oBAAqB,CACjBrI,KAAMC,EAAAA,GAAAA,OACNF,KAAM,yCACNG,aAAcmH,EAAiBgB,oBAC/B/H,IAAK,EACLH,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,kBAGRa,mBAAoB,CAChBtI,KAAMC,EAAAA,GAAAA,OACNF,KAAM,uCACNG,aAAcmH,EAAiBiB,mBAC/BhI,IAAK,EACLH,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,yBAGRc,yBAA0B,CACtBvI,KAAMC,EAAAA,GAAAA,QACNF,KAAM,oDACNG,aAAcmH,EAAiBkB,yBAC/BpI,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,aAGRe,eAAgB,CACZxI,KAAMC,EAAAA,GAAAA,QACNF,KAAM,0CACNG,aAAcmH,EAAiBmB,eAC/BrI,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,eAGRgB,qBAAsB,CAClBzI,KAAMC,EAAAA,GAAAA,OACNF,KAAM,4CACNG,aAAcmH,EAAiBoB,qBAC/BtI,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,0BAGRiB,WAAY,CACR1I,KAAMC,EAAAA,GAAAA,OACNF,KAAM,sCACNG,aAAcmH,EAAiBqB,WAC/BvI,WAAWqH,EAAAA,EAAAA,IACP7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,iBAKNkB,EAAmBC,OAAOC,OAAO/I,GAAQgJ,MAAKC,IAAUA,EAAM5I,WAE9D6I,EACF,gBAAC,IAAD,CAAS1K,GAAG,mBACR,gBAAC,IAAD,CAAkBA,GAAG,qBAIvB2K,GAAWzB,EAAAA,EAAAA,IACb7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,OAEEyB,GAAU1B,EAAAA,EAAAA,IACZ7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,UAEE0B,GAAa3B,EAAAA,EAAAA,IACf7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,SAEE2B,GAAU5B,EAAAA,EAAAA,IACZ7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,YAEE4B,GAAc7B,EAAAA,EAAAA,IAChB7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,cAEE6B,GACF9B,EAAAA,EAAAA,IACI7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,gBAEJD,EAAAA,EAAAA,IACI7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,aAEF8B,EAAeN,GAAYC,GAAWC,GAAcC,EAOpDI,IALehC,EAAAA,EAAAA,IACjB7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,mBAKC4B,IACIhC,EAAiBZ,SAAWgD,EAAAA,GAAAA,QAC2B,MAAnDpC,EAAiBqC,kBAAkBC,gBAC/BC,EAAAA,EAAAA,KAAUvC,EAAiBqC,kBAAkBC,aAAc,UAEtEE,EAAkB,CACpBC,QAAS,CACL9J,KAAMC,EAAAA,GAAAA,OACNF,KAAM,qCACNG,aAAc,GACdC,SAAUqJ,EACVnF,QAAS,4CAIX0F,GAAoBvC,EAAAA,EAAAA,IACtB7F,EAAoBkB,sBACpB4E,EAAAA,GAAAA,cAGJ,IAAI9C,EAA0C,KAS9C,OARI0C,IACA1C,EAAqB,CACjBI,aAAcC,EAAAA,EAAAA,SACd0E,iBAAkBrC,EAAiBqC,iBACnCM,iBAAkB3C,EAAiB2C,mBAKvC,uBAAKrJ,UAAU,eACX,gBAAC,IAAD,CAAiBC,IAAKyG,KACrBpC,EAAAA,EAAAA,IAAcpD,GACf,sBAAIlB,UAAU,eACV,gBAAC,IAAD,CAAkBrC,GAAG,gCACrB,gBAAC,IAAD,CACI2L,MAAI,EACJC,QACI7C,EAAiBZ,SAAWgD,EAAAA,GAAAA,OACtB,UACApC,EAAiBZ,SAAWgD,EAAAA,GAAAA,QAC5B,SACA,WAEV,gBAAC,IAAD,CACInL,GAAK,+BACDmL,EAAAA,GAAepC,EAAiBZ,cAKhD,2BACCsD,EACG,gBAAC,IAAD,CAAkB7E,SAAUP,IAE5B,gBAAC,IAAD,CAAcQ,MAAM,kCAExB,2BACA,sBAAIxE,UAAU,eACV,gBAAC,IAAD,CAAkBrC,GAAG,mCAEvB+K,EAME,KALAV,EACI,gBAAC,IAAD,CAAcxD,MAAM,8BAEpB,gBAAC,IAAD,CAAcA,MAAM,qDAG5B,gBAAC,IAAD,CAAWrF,OAAQA,EAAQwB,OAAQqG,EAAsBvC,cAAeiE,IACxE,2BACA,sBAAI1I,UAAU,eACV,gBAAC,IAAD,CAAkBrC,GAAG,kCAExBiL,EACG,gCACMF,EAEE,KADA,gBAAC,IAAD,CAAclE,MAAM,6CAExB,uBAAKxE,UAAU,oBACX,gBAAC,IAAD,CACIwJ,QAASnB,EACTrD,MAAMsD,QAAmB7H,GACzB,gBAAC,IAAD,CACI8I,QAAQ,UACRvJ,UAAU,OACViF,QAlU5B3C,iBACIiD,GAAW,GACX,MAAMxH,QAAiBgJ,EAAAA,EAAAA,cAAgC/F,EAAoBxD,SAASG,IAChFI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,QAE9B0B,EAAAA,EAAAA,iBAAgCb,EAASU,QAAQd,IAAI,KAAWiJ,OAChEhI,EAAAA,EAAAA,SAA0B,QACpBgI,KAEVrB,GAAW,IAyTa/F,SACKkJ,GACGhC,EAAiBZ,QAAUgD,EAAAA,GAAAA,UAC9BR,GAEL,gBAAC,IAAD,CAAkB3K,GAAG,iCAG7B,gBAAC,IAAD,CACI6L,QAASnB,EACTrD,MAAMuD,QAAkB9H,GACxB,gBAAC,IAAD,CACI8I,QAAQ,SACRvJ,UAAU,OACViF,QApU5B3C,iBACI,IAAKmH,QAAQhN,EAAMiN,KAAKC,cAAc,CAAEhM,GAAI,sCACxC,OAGJ4H,GAAW,GACX,MAAMxH,QAAiBgJ,EAAAA,EAAAA,aAA+B/F,EAAoBxD,SAASG,IAC/EI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,aAExB0J,IAEVrB,GAAW,IAyTa/F,SACKkJ,GACGhC,EAAiBZ,QAAUgD,EAAAA,GAAAA,UAC9BP,GAEL,gBAAC,IAAD,CAAkB5K,GAAG,gCAG7B,gBAAC,IAAD,CACI6L,QAASnB,EACTrD,MAAMwD,QAAqB/H,GAC3B,gBAAC,IAAD,CACI8I,QAAQ,UACRvJ,UAAU,OACViF,QApU5B3C,iBACI,IAAKmH,QAAQhN,EAAMiN,KAAKC,cAAc,CAAEhM,GAAI,yCACxC,OAGJ4H,GAAW,GACX,MAAMxH,QAAiBgJ,EAAAA,EAAAA,gBAAkC/F,EAAoBxD,SAASG,IAClFI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,QAE9B0B,EAAAA,EAAAA,iBAAgCb,EAASU,QAAQd,IAAI,KAAWiJ,OAChEhI,EAAAA,EAAAA,SAA0B,QACpBgI,KAEVrB,GAAW,IAuTa/F,SACKkJ,GACGhC,EAAiBZ,QAAUgD,EAAAA,GAAAA,UAC9BN,GAEL,gBAAC,IAAD,CAAkB7K,GAAG,mCAG7B,gBAAC,IAAD,CACI6L,QAASnB,EACTrD,MAAMyD,QAAkBhI,GACxB,gBAAC,IAAD,CACI8I,QAAQ,OACRvJ,UAAU,OACViF,QAlU5B3C,iBACIiD,GAAW,GACX,MAAMxH,QAAiBgJ,EAAAA,EAAAA,aAA+B/F,EAAoBxD,SAASG,IAC/EI,EAASE,OAASC,EAAAA,EAAAA,OAClBjB,EAAAA,EAAAA,IAASiE,EAAYnD,EAASb,OAE9B0B,EAAAA,EAAAA,SAA0B,EAE9B2G,GAAW,IA2Ta/F,SACKkJ,GACGhC,EAAiBZ,QAAUgD,EAAAA,GAAAA,SAC9BL,GAEL,gBAAC,IAAD,CAAkB9K,GAAG,kCAMrC,gBAAC,IAAD,CAAc6G,MAAM,qCAEtBkE,GAAeC,EACb,gBAAC,IAAD,CAAcnE,MAAM,8CACpB,KAEHkE,GAAeC,EACZ,uBAAK3I,UAAU,gBACX,gBAAC,KAAD,CACIZ,KAAK,yBACLC,KAAMC,EAAAA,GAAAA,KACNQ,KAAM0G,EACN9C,QAAQ,8BACRnE,aACImH,EAAiBkD,YACXpD,EAAeqD,QACfnD,EAAiBoD,aACjBtD,EAAeuD,KACfvD,EAAewD,KAEzBxK,UAAWmJ,EACXsB,SAAUtF,IAGN,OAFeA,GAGX,KAAK6B,EAAewD,KAChB,IACKtD,GAAkBkD,cAClBlD,GAAkBoD,aAEnB,OACC9C,EAAqB,CACtB8C,cAAcpD,EAAiBoD,mBAEzBrJ,EACNmJ,aAAalD,EAAiBkD,kBAExBnJ,IAEV,MACJ,KAAK+F,EAAeuD,KAChB,GAAIrD,GAAkBoD,aAAc,OAC/B9C,EAAqB,CACtB8C,cAAc,IAElB,MACJ,KAAKtD,EAAeqD,QAChB,GAAInD,GAAkBkD,YAAa,OAC9B5C,EAAqB,CACtB4C,aAAa,SAOrChB,EACA,gBAAC,IAAD,CAAcpE,MAAM,qCACpB,KAEJ,uBAAKxE,UAAU,gBACX,2BACA,gBAAC,IAAD,CACIb,OAAQ+J,EACRvI,OAAQuJ,IACClD,EAAqB,CACtBmD,iBAAkBD,EAAaf,WAGvCiB,cAAc,yC,kVCzdlC,MAAMC,EACFC,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,0CACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8CACAA,EAAAA,GAAAA,8BAEEC,EACFzD,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,SACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,cAEE0D,EACFC,EAAAA,GAAAA,UACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,yBACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,sBAEEC,EACFvI,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,4BACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBAEEwI,EAAmBC,EAAAA,GAAAA,KAAqBA,EAAAA,GAAAA,OAExCC,EACFC,EAAAA,GAAAA,KAA2BA,EAAAA,GAAAA,KAA2BA,EAAAA,GAAAA,MAE1D,MAAMC,UAAqBxO,EAAAA,UAwDhBC,YAAYC,GACfC,MAAMD,GAENE,KAAKyB,eAAiBzB,KAAKyB,eAAevB,KAAKF,MAC/CA,KAAKqO,mBAAqBrO,KAAKqO,mBAAmBnO,KAAKF,MAEvD8I,EAAAA,GAAAA,mBAA+BrC,SAASzG,KAAKF,MAAMwO,MAAMC,OAAOvN,IAEhEhB,KAAKG,MAAQ,CACTqO,IAAK1O,EAAMwO,MAAMC,OAAOC,KAAOJ,EAAaK,KAAK,GAAG,GACpDrO,OAAQ,IAAIsO,IACZ7N,SAAU,KACV0E,sBAAuB,KACvB9D,eAAgBzB,KAAKyB,eACrBkN,YAAa3O,KAAKqO,mBAClBO,WAAYnI,SAASzG,KAAKF,MAAMwO,MAAMC,OAAOvN,KAI9CqN,mBAAmB9N,GACtBP,KAAKQ,UAASoD,IACV,MAAMiL,EAAS,IAAIH,IAAI9K,EAAKxD,QAE5B,OADAyO,EAAOC,OAAOvO,GACP,CACHH,OAAQyO,MAKU,gCACpB7O,KAAKyB,iBAGRsN,mBAAmBC,GAElBhP,KAAKF,MAAMwO,MAAMC,OAAOC,KACxBQ,EAAUV,MAAMC,OAAOC,KAAOxO,KAAKF,MAAMwO,MAAMC,OAAOC,KAEtDxO,KAAKQ,SAAS,CACVgO,IAAKxO,KAAKF,MAAMwO,MAAMC,OAAOC,MAKd,uBACvBxO,KAAKQ,SAAS,CACVK,SAAU,KACV0E,sBAAuB,OAE3B,MAAMnE,QAAiBC,EAAAA,EAAAA,YAA2BrB,KAAKG,MAAMyO,YAC7D,GAAIxN,EAASE,OAASC,EAAAA,EAAAA,GAAe,CACjCvB,KAAKQ,SAAS,CACVK,SAAUO,EAASU,UAGvB,MAAMN,QAAkByN,EAAAA,EAAAA,gCACpBjP,KAAKG,MAAMyO,YACX,GAEApN,EAAUF,OAASC,EAAAA,EAAAA,GACnBvB,KAAKQ,SAAS,CACV+E,sBAAuB/D,EAAUM,UAGrC9B,KAAKQ,UAASoD,IACV,MAAMiL,EAAS,IAAIH,IAAI9K,EAAKxD,QAE5B,OADAyO,EAAOK,IAAI1N,EAAUjB,OACd,CACHgF,sBAAuB,KACvBnF,OAAQyO,WAKpB7O,KAAKQ,UAASoD,IACV,MAAMiL,EAAS,IAAIH,IAAI9K,EAAKxD,QAE5B,OADAyO,EAAOK,IAAI9N,EAASb,OACb,CACHM,SAAU,KACVT,OAAQyO,MAMjB3M,SACH,IAAKlC,KAAKG,MAAMU,WAAab,KAAKG,MAAMoF,sBACpC,OAAO,gBAAC,IAAD,CAASxB,KAAK,qBA0EzB,OACI,gBAAC,aAAD,CACIoL,MACI7D,OAAO8D,OACH,CAAE7M,KAAMvC,KAAKe,QAAQwB,KAAM8M,WAAYrP,KAAKe,QAAQsO,YACpDrP,KAAKG,QAGb,gBAAC,IAAD,CAAMkD,UAAU,cACZ,gBAAC,WAAD,CAAaA,UAAU,+BACnB,0BACI,gBAAC,IAAD,CACIrC,GAAG,0BACHuK,OAAQ,CACJqD,WAAY5O,KAAKF,MAAMwO,MAAMC,OAAOvN,GACpCsO,aAActP,KAAKG,MAAMU,SAAS4B,SAI9C,sBAAIY,UAAU,iBACV,gBAAC,IAAD,CAAkBrC,GAAK,0BAAyBhB,KAAKG,MAAMqO,UAGnE,gBAAC,cAAD,CACIe,cAAY,EACZC,eAAa,EACbxO,GAAG,eACHyO,UAAWzP,KAAKG,MAAMqO,KACtB,uBAAKnL,UAAU,2BACX,gBAAC,SAAD,CAAWA,UAAU,eApG7B,KAEJ,gBAAC,IAAD,CACIqM,iBAAkB1P,KAAKG,MAAMqO,IAC7BmB,SAAUC,IACNA,EAAWA,GAAYxB,EAAaK,KAAK,GAAG,GAC5C3F,EAAAA,GAAAA,wBAAoC8G,EACpC5P,KAAKF,MAAM+P,QAAQjP,KACfkP,EAAAA,GAAAA,aAAAA,MAA+BA,EAAAA,GAAAA,aAAAA,OAEnC9P,KAAKQ,SAAS,CAAEgO,IAAKoB,GAAYxB,EAAaK,KAAK,GAAG,MAE1DsB,MAAI,EACJnD,QAAQ,QACR6C,UAAWzP,KAAKG,MAAMqO,IACtBnL,UACI,6DACC2M,EAAAA,GAAAA,oBAAAA,QAA4CC,EAAAA,GAAAA,SACvC,YACAD,EAAAA,GAAAA,oBAAAA,QAA4CC,EAAAA,GAAAA,OAC5C,WACA,IAEVC,MAAO,CAAEC,IAAK,QACb/B,EAAaK,KAAKlL,KAAI,EAAE6M,EAAQC,EAAMC,EAAUC,MAC7C,IAAKvQ,KAAKG,MAAMoF,sBACZ,MAAMiL,MACF,oEAGR,MAAMC,GAAOF,EACPG,GAAgBJ,EAClBtQ,KAAKG,MAAMoF,sBACXvF,KAAKe,SAGT,OACI,gBAAC,SAAD,CAAU2C,IAAK0M,GACX,gBAAC,SAAD,CACIR,SAAUQ,EACVO,SAAS,2BACTtN,WACKoN,EAAM,uBAAyB,KAC/BC,EAAe,mCAAqC,IACrD,cAEJ,gBAAC,WAAD,KACI,gBAAC,IAAD,CACIL,KAAMK,EAAe,OAASL,EAC9BO,YAAU,IAEd,uBACIvN,UACI,4BACCqN,EAAe,sBAAwB,KAE5C,wBAAMrN,UAAU,QACZ,gBAAC,IAAD,CACIrC,GAAK,0BAAyBoP,eA0ClBS,IACpC,gBAAC,SAAD,CAAWxN,UAAU,WACjB,gBAAC,YAAD,KACK+K,EAAaK,KAAKlL,KAAI,EAAE6M,EAAD,CAAWE,EAAUQ,MACzC,IAAK9Q,KAAKG,MAAMoF,sBACZ,MAAMiL,MACF,+DAGR,OACI,gBAAC,SAAD,CAAUZ,SAAUQ,EAAQ1M,IAAK0M,GAC5BU,EACIR,EACGtQ,KAAKG,MAAMoF,sBACXvF,KAAKe,SAIL,gBAAC+P,EAAD,MAFA,gBAAC,IAAD,MAKJ,gBAAC,IAAD,iBA3Q9C1C,EACYK,KASR,CACF,CAAC,OAAQ,OAAQ,KAAM,EAAMsC,EAAAA,SAC7B,CACI,aACA,cACAxL,MAA4BA,EAAsByL,iBAAmBnD,GACrEoD,EAAAA,SAEJ,CACI,SACAC,EAAAA,IACA3L,MAA4BA,EAAsB4L,aAAezD,GACjE0D,EAAAA,SAEJ,CACI,aACA,SACA7L,MACOA,EAAsB8L,iBAAmBtD,GAChD3J,EAAAA,YAEJ,CACI,cACA,SACAmB,MACOA,EAAsB+L,kBAAoB1D,GACjD2D,EAAAA,SAEJ,CACI,WACA,WACAhM,MAA4BA,EAAsBiM,cAAgBxD,GAClEyD,EAAAA,SAEJ,CACI,QACA,cACAlM,MACOA,EAAsBmM,oBAAsBxD,GACnDyD,EAAAA,SAEJ,CAAC,QAAS,QAAS,KAAM,EAAMC,EAAAA,SAC/B,CAAC,OAAQ,SAAU,KAAM,EAAMrJ,EAAAA,UAsOvC6F,EAAanK,YAAc4N,EAAAA,EAC3B,WAAe1N,EAAAA,EAAAA,IAAWiK","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/JobHistory.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/InstanceEdit.tsx"],"sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    CompileJobResponse,\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { DeploymentsData, ViewDataType } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n    const [compileJobs, setCompileJobs] = useState<CompileJobResponse[] | null>(null);\n    const [compileJobsPage, setCompileJobsPage] = useState<number>(1);\n    const [compileJobsTotalPages, setCompileJobsTotalPages] = useState<number>(0);\n\n    // adjusts the size of the viewer pages, undefined uses default server page size\n    const [compileJobsPageSize, setCompileJobsPageSize] = useState<number | undefined>(5);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n    const canReadDeployments = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.CompileJobs\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    async function loadCompileJobs(page: number): Promise<void> {\n        if (!canReadDeployments) {\n            return;\n        }\n\n        // loading is handled in viewer component\n        setCompileJobs(null);\n        const response = await DreamMakerClient.listCompileJobs(instanceEditContext.instance.id, {\n            page,\n            pageSize: compileJobsPageSize\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (!compileJobsPageSize) setCompileJobsPageSize(response.payload.pageSize);\n\n            setCompileJobsTotalPages(response.payload.totalPages);\n            setCompileJobsPage(page);\n            setCompileJobs(response.payload.content);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        void loadCompileJobs(1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 0,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        requireDMApiValidation: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.requireDMApiValidation,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    let deploymentViewData: DeploymentsData | null = null;\n    const paging = {\n        currentPage: compileJobsPage,\n        totalPages: compileJobsTotalPages,\n        loadPage: loadCompileJobs,\n        pageSize: compileJobsPageSize ?? 0 // will always be set before being accessed\n    };\n\n    if (!canReadDeployments) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            paging\n        };\n    } else if (compileJobs) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            compileJobs,\n            paging\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            {displayErrors(errorState)}\n            {canReadDeployments ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {isLoading ? (\n                <Loading text=\"loading.deployments\" />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={async () => {\n                                const response = await DreamMakerClient.startCompile(\n                                    instanceEditContext.instance.id\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    addError(errorState, response.error);\n                                } else {\n                                    JobsController.registerJob(\n                                        response.payload,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.fastmode = 5;\n                                }\n                            }}>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport JobsClient, { TGSJobResponse } from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport JobCard from \"../../../utils/JobCard\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\nexport default function JobHistory(): JSX.Element {\n    const instanceEditContext = React.useContext(InstanceEditContext);\n\n    const [jobs, setJobs] = useState<TGSJobResponse[]>([]);\n    const [errors, setErrors] = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(\n        RouteData.jobhistorypage.get(instanceEditContext.instance.id) ?? 1\n    );\n    const [maxPage, setMaxPage] = useState<number | undefined>(undefined);\n\n    //const [];\n\n    useEffect(() => {\n        async function loadJobs() {\n            const response = await JobsClient.listJobs(instanceEditContext.instance.id, {\n                page: page\n            });\n            if (response.code === StatusCode.OK) {\n                if (page > response.payload.totalPages && response.payload.totalPages !== 0)\n                    setPage(1);\n                setJobs(response.payload.content);\n                setMaxPage(response.payload.totalPages);\n            } else {\n                addError(response.error);\n            }\n            setLoading(false);\n        }\n\n        RouteData.jobhistorypage.set(instanceEditContext.instance.id, page);\n        setLoading(true);\n        void loadJobs();\n    }, [page, instanceEditContext.instance.id]);\n\n    useEffect(() => {}, [errors]);\n\n    function addError(error: InternalError<ErrorCode>): void {\n        setErrors(prevState => {\n            const errors = Array.from(prevState);\n            errors.push(error);\n            return errors;\n        });\n    }\n\n    async function onCancel(job: TGSJobResponse) {\n        const status = await JobsClient.deleteJob(job.instanceId, job.id);\n\n        if (status.code === StatusCode.OK) {\n            JobsController.fastmode = 5;\n        } else {\n            addError(status.error);\n        }\n    }\n\n    if (loading) {\n        return <Loading text=\"loading.instance.jobs.list\" />;\n    }\n\n    return (\n        <div>\n            <DebugJsonViewer obj={jobs} />\n            {errors.map((err, index) => {\n                if (!err) return;\n                return (\n                    <ErrorAlert\n                        key={index}\n                        error={err}\n                        onClose={() =>\n                            setErrors(prev => {\n                                const newarr = Array.from(prev);\n                                newarr[index] = undefined;\n                                return newarr;\n                            })\n                        }\n                    />\n                );\n            })}\n            {jobs\n                .sort((a, b) => b.id - a.id)\n                .filter(job => !!job.stoppedAt)\n                .map(job => (\n                    <JobCard job={job} key={job.id} onCancel={onCancel} />\n                ))}\n            <PageHelper\n                selectPage={newPage => setPage(newPage)}\n                totalPages={maxPage ?? 1}\n                currentPage={page}\n            />\n        </div>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\nimport { gte as SemVerGte } from \"semver\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonRequest,\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { ViewDataType, WatchdogData } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nfunction Server(props: WrappedComponentProps): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void loadWatchdogSettings(), [instanceEditContext.instance.id]);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonRequest): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.stop\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.restart\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        startProfiler: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostartprofiler\",\n            defaultValue: watchdogSettings.startProfiler,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetProfiler\n            )\n        },\n        logOutput: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.logoutput\",\n            defaultValue: watchdogSettings.logOutput,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetLogOutput\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        healthCheckSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.healthcheck\",\n            defaultValue: watchdogSettings.healthCheckSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHealthCheckInterval\n            )\n        },\n        dumpOnHealthCheckRestart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.dumpOnHealthCheckRestart\",\n            defaultValue: watchdogSettings.dumpOnHealthCheckRestart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.CreateDump\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        },\n        mapThreads: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.mapthreads\",\n            defaultValue: watchdogSettings.mapThreads,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMapThreads\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    const canBroadcast = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.BroadcastMessage\n    );\n\n    const broadcastNotAllowed =\n        !canBroadcast ||\n        (canMetadata &&\n            (watchdogSettings.status !== WatchdogStatus.Online ||\n                (watchdogSettings.activeCompileJob?.dmApiVersion != null &&\n                    !SemVerGte(watchdogSettings.activeCompileJob?.dmApiVersion, \"5.7.0\"))));\n\n    const broadcastFields = {\n        message: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.broadcast\",\n            defaultValue: \"\",\n            disabled: broadcastNotAllowed,\n            tooltip: \"fields.instance.watchdog.broadcast.desc\"\n        }\n    };\n\n    const canViewDeployment = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadRevision\n    );\n\n    let deploymentViewData: WatchdogData | null = null;\n    if (watchdogSettings) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.Watchdog,\n            activeCompileJob: watchdogSettings.activeCompileJob,\n            stagedCompileJob: watchdogSettings.stagedCompileJob\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                            ? \"danger\"\n                            : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            <hr />\n            {canViewDeployment ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={startWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={stopWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={restartWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={dumpWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                ? GracefulAction.Stop\n                                : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n\n            <div className=\"w-75 mx-auto\">\n                <br />\n                <InputForm\n                    fields={broadcastFields}\n                    onSave={fieldsResult => {\n                        void saveWatchdogSettings({\n                            broadcastMessage: fieldsResult.message\n                        });\n                    }}\n                    saveMessageId=\"view.instance.server.broadcast\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default injectIntl(Server);\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { faGamepad } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport {\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    EngineRights,\n    InstancePermissionSetResponse,\n    RepositoryRights\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { InstanceEditSidebar } from \"../../../ApiClient/util/config\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport AccessDenied from \"../../utils/AccessDenied\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport ChatBots from \"./Edit/ChatBots\";\nimport Config from \"./Edit/Config\";\nimport { Deployment } from \"./Edit/Deployment\";\nimport Engine from \"./Edit/Engine\";\nimport Files from \"./Edit/Files\";\nimport InstancePermissions from \"./Edit/InstancePermissions\";\nimport JobHistory from \"./Edit/JobHistory\";\nimport Repository from \"./Edit/Repository\";\nimport Server from \"./Edit/Server\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nconst minimumEnginePerms =\n    EngineRights.ReadActive |\n    EngineRights.ListInstalled |\n    EngineRights.InstallOfficialOrChangeActiveByondVersion |\n    EngineRights.InstallCustomByondVersion |\n    EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion |\n    EngineRights.InstallCustomOpenDreamVersion;\n\nconst minimumServerPerms =\n    DreamDaemonRights.SetPort |\n    DreamDaemonRights.SetAutoStart |\n    DreamDaemonRights.SetSecurity |\n    DreamDaemonRights.ReadMetadata |\n    DreamDaemonRights.SetWebClient |\n    DreamDaemonRights.SoftRestart |\n    DreamDaemonRights.SoftShutdown |\n    DreamDaemonRights.Restart |\n    DreamDaemonRights.Shutdown |\n    DreamDaemonRights.Start |\n    DreamDaemonRights.SetStartupTimeout |\n    DreamDaemonRights.SetHealthCheckInterval |\n    DreamDaemonRights.CreateDump |\n    DreamDaemonRights.SetTopicTimeout |\n    DreamDaemonRights.SetAdditionalParameters |\n    DreamDaemonRights.SetVisibility;\n\nconst minimumRepoPerms =\n    RepositoryRights.SetOrigin |\n    RepositoryRights.SetSha |\n    RepositoryRights.MergePullRequest |\n    RepositoryRights.UpdateBranch |\n    RepositoryRights.ChangeCommitter |\n    RepositoryRights.ChangeTestMergeCommits |\n    RepositoryRights.ChangeCredentials |\n    RepositoryRights.SetReference |\n    RepositoryRights.Read |\n    RepositoryRights.ChangeAutoUpdateSettings |\n    RepositoryRights.Delete |\n    RepositoryRights.ChangeSubmoduleUpdate;\n\nconst minimumDeployPerms =\n    DreamMakerRights.Read |\n    DreamMakerRights.Compile |\n    DreamMakerRights.SetApiValidationPort |\n    DreamMakerRights.SetDme |\n    DreamMakerRights.SetApiValidationRequirement |\n    DreamMakerRights.SetTimeout |\n    DreamMakerRights.SetSecurityLevel;\n\nconst minimumChatPerms = ChatBotRights.Read | ChatBotRights.Create;\n\nconst minimumFilePerms =\n    ConfigurationRights.Read | ConfigurationRights.List | ConfigurationRights.Write;\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public static tabs: [\n        string,\n        IconProp,\n        (\n            instancePermissionSet: InstancePermissionSetResponse,\n            generalContext: GeneralContext\n        ) => boolean,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ComponentType<any>?\n    ][] = [\n        [\"info\", \"info\", () => true, Config],\n        [\n            \"repository\",\n            \"code-branch\",\n            instancePermissionSet => !!(instancePermissionSet.repositoryRights & minimumRepoPerms),\n            Repository\n        ],\n        [\n            \"engine\",\n            faGamepad,\n            instancePermissionSet => !!(instancePermissionSet.engineRights & minimumEnginePerms),\n            Engine\n        ],\n        [\n            \"deployment\",\n            \"hammer\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamMakerRights & minimumDeployPerms),\n            Deployment\n        ],\n        [\n            \"dreamdaemon\",\n            \"server\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamDaemonRights & minimumServerPerms),\n            Server\n        ],\n        [\n            \"chatbots\",\n            \"comments\",\n            instancePermissionSet => !!(instancePermissionSet.chatBotRights & minimumChatPerms),\n            ChatBots\n        ],\n        [\n            \"files\",\n            \"folder-open\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.configurationRights & minimumFilePerms),\n            Files\n        ],\n        [\"users\", \"users\", () => true, InstancePermissions],\n        [\"jobs\", \"stream\", () => true, JobHistory]\n    ];\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab ?? InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.reloadInstance();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (\n            this.props.match.params.tab &&\n            prevProps.match.params.tab != this.props.match.params.tab\n        ) {\n            this.setState({\n                tab: this.props.match.params.tab\n            });\n        }\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid,\n                true\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = () => {\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey ?? InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link ?? AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey ?? InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className={\n                        \"flex-nowrap text-nowrap flex-column hover-bar sticky-top \" +\n                        (configOptions.instanceeditsidebar.value === InstanceEditSidebar.COLLAPSE\n                            ? \"pin-close\"\n                            : configOptions.instanceeditsidebar.value === InstanceEditSidebar.EXPAND\n                            ? \"pin-open\"\n                            : \"\")\n                    }\n                    style={{ top: \"8em\" }}>\n                    {InstanceEdit.tabs.map(([tabKey, icon, accessCb, component]) => {\n                        if (!this.state.instancePermissionSet) {\n                            throw Error(\n                                \"this.state.instancePermissionSet is null in instanceedit nav map\"\n                            );\n                        }\n                        const wip = !component;\n                        const accessDenied = !accessCb(\n                            this.state.instancePermissionSet,\n                            this.context\n                        );\n\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab\"\n                                    className={\n                                        (wip ? \"no-access text-white\" : \"\") +\n                                        (accessDenied ? \"no-access text-white font-italic\" : \"\") +\n                                        \" text-left\"\n                                    }>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon\n                                            icon={accessDenied ? \"lock\" : icon}\n                                            fixedWidth\n                                        />\n                                        <div\n                                            className={\n                                                \"tab-text d-inline-block \" +\n                                                (accessDenied ? \"font-weight-lighter\" : \"\")\n                                            }>\n                                            <span className=\"pl-1\">\n                                                <FormattedMessage\n                                                    id={`view.instanceedit.tabs.${tabKey}`}\n                                                />\n                                            </span>\n                                        </div>\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card className=\"behind-nav\">\n                    <Card.Header className=\"text-center mb-2 sticky-top\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <div className=\"d-flex flex-row z-front\">\n                            <Card.Body className=\"flex-grow-0\">{nav()}</Card.Body>\n                            <Card.Body className=\"bg-body\">\n                                <Tab.Content>\n                                    {InstanceEdit.tabs.map(([tabKey, , accessCb, Comp]) => {\n                                        if (!this.state.instancePermissionSet) {\n                                            throw Error(\n                                                \"this.state.instancePermissionSet is null in render card map\"\n                                            );\n                                        }\n                                        return (\n                                            <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                                {Comp ? (\n                                                    !accessCb(\n                                                        this.state.instancePermissionSet,\n                                                        this.context\n                                                    ) ? (\n                                                        <AccessDenied />\n                                                    ) : (\n                                                        <Comp />\n                                                    )\n                                                ) : (\n                                                    <WIPNotice />\n                                                )}\n                                            </Tab.Pane>\n                                        );\n                                    })}\n                                </Tab.Content>\n                            </Card.Body>\n                        </div>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\n\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n"],"names":["InstanceSettings","React","constructor","props","super","this","editInstance","bind","state","errors","moving","addError","error","setState","prevState","Array","from","push","instance","instanceId","context","id","newPath","path","online","response","InstanceClient","code","StatusCode","response2","reloadInstance","response3","Promise","resolve","setTimeout","payload","moveJob","response4","JobsController","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","name","type","FieldType","defaultValue","disabled","InstanceManagerRights","chatBotLimit","min","autoUpdateInterval","configurationType","enum","ConfigurationType","className","obj","map","err","index","key","onClose","prev","newarr","undefined","text","onSave","contextType","InstanceEditContext","withRouter","Deployment","instanceEditContext","useContext","errorState","useState","isLoading","setIsLoading","deployInfo","setDeployInfo","compileJobs","setCompileJobs","compileJobsPage","setCompileJobsPage","compileJobsTotalPages","setCompileJobsTotalPages","compileJobsPageSize","setCompileJobsPageSize","canRead","hasDreamMakerRight","instancePermissionSet","DreamMakerRights","canCompile","canReadDeployments","async","loadDeployInfo","DreamMakerClient","loadCompileJobs","page","pageSize","totalPages","content","timeout","useEffect","parsedTimeMatch","exec","parsedTime","groups","parseInt","days","hours","minutes","seconds","projectName","tooltip","apiValidationPort","max","apiValidationSecurityLevel","DreamDaemonSecurity","requireDMApiValidation","deploymentViewData","paging","currentPage","loadPage","viewDataType","ViewDataType","displayErrors","viewData","title","hideDisabled","newTimeout","_result","Math","floor","result","tooltipid","show","onClick","JobHistory","jobs","setJobs","setErrors","loading","setLoading","setPage","RouteData","maxPage","setMaxPage","onCancel","job","status","JobsClient","loadJobs","sort","a","b","filter","stoppedAt","selectPage","newPage","GracefulAction","injectIntl","watchdogSettings","setWatchdogSettings","loadWatchdogSettings","hasDreamDaemonRight","DreamDaemonRights","DreamDaemonClient","saveWatchdogSettings","newSettings","autoStart","startProfiler","logOutput","port","visibility","DreamDaemonVisibility","securityLevel","startupTimeout","topicRequestTimeout","healthCheckSeconds","dumpOnHealthCheckRestart","allowWebClient","additionalParameters","mapThreads","anyEditableField","Object","values","some","field","no_perm_tooltip","canStart","canStop","canRestart","canDump","canMetadata","canGracefulAny","canActionAny","broadcastNotAllowed","WatchdogStatus","activeCompileJob","dmApiVersion","SemVerGte","broadcastFields","message","canViewDeployment","stagedCompileJob","pill","variant","overlay","confirm","intl","formatMessage","softRestart","Restart","softShutdown","Stop","None","onChange","fieldsResult","broadcastMessage","saveMessageId","minimumEnginePerms","EngineRights","minimumServerPerms","minimumRepoPerms","RepositoryRights","minimumDeployPerms","minimumChatPerms","ChatBotRights","minimumFilePerms","ConfigurationRights","InstanceEdit","deleteContextError","match","params","tab","tabs","Set","deleteError","instanceid","newSet","delete","componentDidUpdate","prevProps","InstancePermissionSetClient","add","value","assign","serverInfo","instancename","mountOnEnter","unmountOnExit","activeKey","defaultActiveKey","onSelect","eventKey","history","AppRoutes","fill","configOptions","InstanceEditSidebar","style","top","tabKey","icon","accessCb","component","Error","wip","accessDenied","bsPrefix","fixedWidth","nav","Comp","Config","repositoryRights","Repository","faGamepad","engineRights","Engine","dreamMakerRights","dreamDaemonRights","Server","chatBotRights","ChatBots","configurationRights","Files","InstancePermissions","GeneralContext"],"sourceRoot":""}